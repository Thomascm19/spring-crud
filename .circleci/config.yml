version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point

    working_directory: ~/crud-github # directory where steps will run

    docker: # run the steps with Docker
      - image: cimg/openjdk:18.0.2 # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          DB_ROOT_USER: root
          DB_URL: jdbc:mysql://localhost:3306/person
          DB_DRIVER: com.mysql.cj.jdbc.Driver
          DB_PASS: ""

      - image: circleci/mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD: ""

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - run:
          name: "Wait for MySQL"
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run: sudo apt-get install mysql-client

      - run: mysql -h 127.0.0.1 -u root -e "CREATE DATABASE person"

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}

      - run:
          name: Install dependencies
          command: sudo chmod +x ./gradlew

      - save_cache: # saves the project dependencies
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

      - run: ./gradlew test # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/crud-github-0.0.1-SNAPSHOT.jar
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples